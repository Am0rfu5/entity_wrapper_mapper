<?php
/**
 * @file
 * Implements an IMCE/Plupload field widget/formatter for file fields.
 */

/**
 * Implements hook_field_widget_info().
 */
function imce_plup_field_field_widget_info() {
  return array(
    'imce_plup' => array(
      'label' => t('Bulk File Upload'),
      'field types' => array('file'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function imce_plup_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if (isset($element['#entity']->type)) {
    if ($element['#entity']->type == 'hosted_microsite') {
      $scheme = '/hosted';
    }
    elseif ($element['#entity']->type == 'integrated_microsite') {
      $scheme = '/integrated';
    }
    else {
      $scheme = '';
    }
  }
  $options = array();
  if (!empty($element['#entity']->title)) {
    $title = '/' . $element['#entity']->title;
  }
  else {
    $title = '';
  }

  $schemepath = '';
  if (substr($scheme, 0, 1) == '/') {
    $schemepath = drupal_realpath(substr($scheme, 1) . '://');
  }
  if (!$schemepath) {
    $markup = array('#markup' => '<div>Before creating a Microsite, a path to the Microsite\'s root directory (for either Hosted or Integrated Microsites) must be configured. Please do so <a href="' . url('admin/config/media/file-system') . '">here</a>.</div>');
  }
  elseif (!empty($title)) {
    $markup = array(
      '#markup' => '<iframe src="' . url('microsite_imce' . $scheme . $title, $options) . '" frameborder="0" style="border: 1px solid #eee; width: 99%; height: 520px" class="imce-frame"></iframe>');
  }
  else {
    $markup = array('#markup' => '<div>Please create and save this Microsite. Once it\'s been created and initialized, you may edit it to add the Microsite content.</div>');
  }
  $element += $markup;

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function imce_plup_field_field_formatter_info() {
  return array(
    'microsites_file_table' => array(
      'label' => t('Microsite files table'),
      'field types' => array('file'),
    ),
  );
}
/**
 * Implements hook_field_formatter_view().
 */
function imce_plup_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'microsites_file_table':
      if (!empty($items)) {
        // Display all values in a single element..
        $element[0] = array(
          '#theme' => 'microsites_file_formatter_table',
          '#items' => $items,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function imce_plup_field_theme() {
  return array(
    'microsites_file_formatter_table' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Returns HTML for a file attachments table.
 *
 * @param array $variables
 *   An associative array containing:
 *   - items: An array of file attachments.
 *
 * @return string
 *   Themed html.
 */
function theme_microsites_file_formatter_table($variables) {
  $header = array(t('Attachment'), t('Created'), t('Created by'), t('Size'));
  $usernames = array();
  $rows = array();
  foreach ($variables['items'] as $delta => $item) {
    $uid = $item['uid'];
    // Cache the username for each uid so we don't have to load the account
    // or format the name more than once.
    $usernames[$uid] = (empty($usernames[$uid])) ? format_username(user_load($item['uid'])) : $usernames[$uid];
    $uri_pieces = parse_url($item['uri']);
    if (substr($uri_pieces['path'], 0, 1) == '/') {
      $path = substr($uri_pieces['path'], 1);
    }
    else {
      $path = $uri_pieces['path'];
    }
    $item['filename'] = $path;
    $rows[] = array(
      theme('file_link', array('file' => (object) $item)),
      format_date($item['timestamp'], 'short'),
      $usernames[$uid],
      format_size($item['filesize']),
    );
  }
  return empty($rows) ? '' : theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implements hook_imce_user_profile_alter().
 */
function imce_plup_field_imce_user_profile_alter(&$profiles, &$roles_profiles, $scheme) {
  if ($scheme == 'hosted' || $scheme == 'integrated') {
    global $user;
    $q = preg_split("/[\/]{1}/", $_GET['q']);
    $dirname = microsite_entity_munge_directory_name($q[2]);
    $extensions = _imce_plup_field_fetch_file_extensions($scheme, $dirname);
    $sckey = $scheme . '_pid';
    if ($user->uid == 1) {
      $profiles[1]['directories'][0]['name'] = $dirname;
      $profiles[1]['extensions'] = $extensions;
    }
    else {
      if (empty($roles_profiles)) {
        $roles_permissions = user_role_permissions($user->roles);
        foreach ($roles_permissions as $role_id => $permissions) {
          if (
            isset($permissions['edit any microsite_entity entities']) ||
            isset($permissions['edit own microsite_entity entities']) ||
            isset($permissions['view microsite_entity entities']) ||
            isset($permissions['create microsite_entity entities'])
            ) {
            $conf = array($sckey => 1);
            $roles_profiles[$role_id] = $conf;
            break;
          }
        }
      }
      foreach ($roles_profiles as $rid => $conf) {
        if (isset($user->roles[$rid]) && isset($conf[$sckey])) {
          $roles_profiles[$rid][$sckey] = 1;
          $profiles[$conf[$sckey]]['directories'][0]['name'] = $dirname;
          $profiles[$conf[$sckey]]['extensions'] = $extensions;
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_imce_delete_file_alter().
 *
 * IMCE is being used as the file widget, and we need to let IMCE know that
 * it's okay for it to delete a microsite_entity managed file.
 */
function imce_plup_field_imce_delete_file_alter(&$usage) {
  foreach ($usage as $module => $modlist) {
    if ($module == 'file') {
      foreach ($modlist as $type => $use_ct) {
        if ($type == 'microsite_entity') {
          unset($usage[$module][$type]);
        }
      }
      if (empty($usage[$module])) {
        unset($usage[$module]);
      }
    }
  }
}

/**
 * Helper function to get the permitted file extensions for the field.
 *
 * @TODO This should really be elsewhere, since it's specific to the entities
 * and fields defined by microsite_entity.install. Also TBD - integrated
 * microsites.
 *
 * @param string $scheme
 *   The file scheme
 * @param string $dirname
 *   Directory name where files are files for the scheme are stored.
 *
 * @return string
 *   List of permitted file extensions.
 */
function _imce_plup_field_fetch_file_extensions($scheme, $dirname) {
  $extensions = '*';
  if ($scheme == 'hosted') {
    $info = field_info_instance('microsite_entity', 'field_hosted_file_assets', 'hosted_microsite');
    $extensions = $info['settings']['file_extensions'];
  }
  return $extensions;
}
